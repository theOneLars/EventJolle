plugins {
    id 'java'
    id 'org.springframework.boot' version '2.1.5.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.2.71'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.2.71'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

bootJar {
    into('static') {
        from('../frontend/dist/jollen-cockpit/')
    }
}
bootJar.dependsOn ":frontend:npm_run_dist"

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/milestone'
    }
}

ext['spring.framework.version'] = '5.2.0.M2'
ext['spring.version'] = '5.2.0.M2'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'javax.websocket:javax.websocket-api:1.1'
    implementation 'org.springframework.boot.experimental:spring-boot-starter-data-r2dbc:0.1.0.M1'
    implementation 'io.r2dbc:r2dbc-postgresql:1.0.0.M7'

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation("org.flywaydb:flyway-core")
    //the following dependency is only required for flyway
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'io.projectreactor:reactor-test'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

}

sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()
}

// This is required to be able to execute bootRun with parameters, e.g.:
// ./gradlew -Dspring.profiles.active=ci bootRun
bootRun.systemProperties = System.properties
